#ifndef VIRTUAL_MACHINE_HPP
#define VIRTUAL_MACHINE_HPP

#include "audio.hpp"
#include "consts.hpp"
#include "memory.hpp"
#include "render_table.hpp"
#include "virtual_processor.hpp"
#include <array>
#include <cstdint>
#include <string>

static constexpr uint16_t MAX_ROM_SIZE =
    0xFFF - PROCESSOR_INTERNAL_PROGRAM_COUNTER_START;
static constexpr uint8_t FONTSET_SIZE = 80;
static constexpr std::array<uint8_t, FONTSET_SIZE> FONTSET = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
};

class VirtualMachine {
  public:
    VirtualMachine() = default;

    void init_vm_audio();
    void load_rom_from_file(const std::string &rom_path);
    void set_key(uint8_t n, bool is_down);
    void execute_processor_instruction();
    void update_processor_timers();
    bool screen_need_repaint();
    void disable_repaint();
    bool is_pixel_switched_on(uint8_t x, uint8_t y);

  private:
    VirtualProcessor m_virtual_processor;
    Memory m_memory;
    RenderTable m_render_table;
    Audio m_audio;
};

#endif